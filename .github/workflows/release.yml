name: release

on:
  push:
    # tags:
    # - '*'
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      - uses: pnpm/action-setup@v2
        with:
          version: 6.32.9
      
      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          # cache: 'pnpm' # Set this to npm, yarn or pnpm.

      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: pnpm install # Change this to npm, yarn or pnpm.

      - name: Build the app
        uses: tauri-apps/tauri-action@v0

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }} # This only works if your workflow triggers on new tags.
          releaseName: 'App Name v__VERSION__' # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: 'See the assets to download and install this version.'
          releaseDraft: true
          prerelease: false

      # - name: Windows package # 将编译好的二进制文件打包，如果是Windows就打包exe文件，其它系统打包AirISP*文件
      #   if: runner.os == 'Windows'
      #   run : |
      #       mkdir -p ${{ github.workspace }}/release
      #       cd target/${{ matrix.target.name }}/release
      #       mkdir ${{ github.workspace }}/release/AirISP-next/
      #       cp AirISP-next.exe ${{ github.workspace }}/release/AirISP-next/
      #       cd ${{ github.workspace }}/release
      #       7z a -tzip ${{ github.workspace }}/AirISP-${{ github.ref_name }}-${{ matrix.target.file_name }}.zip AirISP-next

      # - name: Package
      #   if: runner.os != 'Windows'
      #   run : |
      #       mkdir -p ${{ github.workspace }}/release
      #       cd target/${{ matrix.target.name }}/release
      #       chmod +x AirISP-next
      #       mkdir ${{ github.workspace }}/release/AirISP-next/
      #       cp AirISP-next ${{ github.workspace }}/release/AirISP-next/
      #       cd ${{ github.workspace }}/release
      #       tar zcvf ${{ github.workspace }}/AirISP-${{ github.ref_name }}-${{ matrix.target.file_name }}.tar.gz AirISP-next

      # - name: Create Windows release
      #   if: runner.os == 'Windows'
      #   uses: ncipollo/release-action@v1
      #   with:
      #     allowUpdates: true
      #     artifacts: "${{ github.workspace }}/AirISP-${{ github.ref_name }}-${{ matrix.target.file_name }}.zip"

      # - name: Create release
      #   if: runner.os != 'Windows'
      #   uses: ncipollo/release-action@v1
      #   with:
      #     allowUpdates: true
      #     artifacts: "${{ github.workspace }}/AirISP-${{ github.ref_name }}-${{ matrix.target.file_name }}.tar.gz"
